# -*- coding: utf-8 -*-
"""NLP.project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vHifn69tLoIDr6WavuRBz78h5NmGSuyU
"""

import pandas as pd
import numpy as np
import re
import string
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import wordnet
from nltk.stem import PorterStemmer
from sklearn.metrics import confusion_matrix,classification_report
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')
nltk.download('stopwords')

df_train=pd.read_csv("/content/train.csv")
df_test=pd.read_csv("/content/test.csv")

df_train.shape

df_test.shape

df_train.head()

y.value_counts()

df_train.isnull().sum()

df_train.dropna(inplace=True)

df_train.isnull().sum()

def clean_text(text):

    if not isinstance(text, str):
      text = str(text)

    # Remove HTML tags
    text = re.sub(r'<.*?>', '', text)

    # Remove URLs
    text = re.sub(r'http\S+', '', text)

    # Remove special characters
    text = re.sub(r'[^a-zA-Z\s]', '', text)

    # Convert to lowercase
    text = text.lower()

    # Tokenize the text
    tokens = nltk.word_tokenize(text)

    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]

    # Stemming
    stemmer = PorterStemmer()
    tokens = [stemmer.stem(word) for word in tokens]

    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]

    preprocessed_text = ' '.join(tokens)

    return preprocessed_text

df_train['tweet_length']=df_train['text'].apply(len)
df_train['num_words']=df_train['text'].apply(lambda x:len(nltk.word_tokenize(x)))
df_train['num_sentences']=df_train['text'].apply(lambda x:len(nltk.sent_tokenize(x)))

df_train[df_train['target']==0][['tweet_length', 'num_words', 'num_sentences']].describe()

df_train[df_train['target']==1][['tweet_length', 'num_words', 'num_sentences']].describe()

x = df_train['text'] = df_train['text'].apply(clean_text)
x_test = df_test['text'] = df_test['text'].apply(clean_text)
y = df_train['target']

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scl = scaler.fit_transform(df_train[['tweet_length']])

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()

X_train_tfidf = tf.fit_transform(x)
X_test_tfidf = tf.transform(x)

"""# Models:"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix , classification_report
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

x_train, x_test, y_train, y_test = train_test_split(X_train_tfidf, y, test_size=0.2, random_state=42)

svm_classifier = SVC(kernel='linear')

svm_classifier.fit(x_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix
y_pred = svm_classifier.predict(x_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

lr_model = LogisticRegression(random_state=42)
lr_model.fit(x_train, y_train)

y_pred = lr_model.predict(x_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
classifier_rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy',
                                       random_state = 0)
classifier_rf.fit(x_train, y_train)

y_pred = classifier_rf.predict(x_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.naive_bayes import GaussianNB
naive_bayes_classifier = GaussianNB()
naive_bayes_classifier.fit(x_train.toarray(), y_train)

y_pred = naive_bayes_classifier.predict(x_test.toarray())

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""# Interpretation and Application

The best Model is **svm** based on evaluation metrics

*   Classify social media posts related to disasters
*   Removing non-disaster related posts
*  Highlighting messages with critical details about ongoing disasters so emergency responders can focus on the most important information.

Real-time Disaster Monitoring and Information Dissemination:

* Developer  an API that can process incoming social media data speficly about disaster in real-time, applying the trained model to classify new posts.
"""